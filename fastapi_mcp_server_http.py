#!/usr/bin/env python3
"""
FastAPI MCP Server - HTTP Mode
Provides tools to discover routes, generate test cases, list tests, and run tests for FastAPI applications.
Runs on http://127.0.0.1:8001/mcp
"""

import importlib
import json
import subprocess
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional
from http.server import HTTPServer, BaseHTTPRequestHandler
import urllib.parse


def import_fastapi_app(app_import_path: str) -> Any:
    """
    Import a FastAPI application from a module path.

    Args:
        app_import_path: Path like 'myapp.main:app' where 'myapp.main' is the module
                        and 'app' is the FastAPI instance variable name.

    Returns:
        The imported FastAPI application instance.
    """
    try:
        module_path, app_name = app_import_path.split(":")
        module = importlib.import_module(module_path)
        fastapi_app = getattr(module, app_name)
        return fastapi_app
    except Exception as e:
        raise ValueError(f"Failed to import FastAPI app from '{app_import_path}': {str(e)}")


def discover_routes(app_import_path: str) -> Dict[str, Any]:
    """Discover all routes in a FastAPI application."""
    try:
        fastapi_app = import_fastapi_app(app_import_path)

        routes = []
        for route in fastapi_app.routes:
            # Skip non-API routes (like static file routes)
            if hasattr(route, "methods") and hasattr(route, "path"):
                route_info = {
                    "methods": list(route.methods),
                    "path": route.path,
                    "name": route.name if hasattr(route, "name") else None,
                    "endpoint": route.endpoint.__name__ if hasattr(route, "endpoint") else None
                }
                routes.append(route_info)

        result = {
            "app_import_path": app_import_path,
            "total_routes": len(routes),
            "routes": routes
        }

        return {"success": True, "data": result}

    except Exception as e:
        return {"success": False, "error": str(e)}


def generate_test_file_content(
    app_import_path: str,
    routes: List[Dict[str, Any]],
    sample_values: Dict[str, Any]
) -> str:
    """Generate the content of a pytest test file."""

    lines = [
        '"""',
        'Auto-generated pytest tests for FastAPI application.',
        'Generated by FastAPI MCP Server.',
        '"""',
        '',
        'import pytest',
        'from fastapi.testclient import TestClient',
        f'from {app_import_path.split(":")[0]} import {app_import_path.split(":")[1]}',
        '',
        '',
        '@pytest.fixture',
        'def client():',
        f'    """Create a test client for the FastAPI app."""',
        f'    return TestClient({app_import_path.split(":")[1]})',
        '',
        ''
    ]

    # Generate test functions for each route
    for route in routes:
        methods = [m for m in route["methods"] if m != "HEAD" and m != "OPTIONS"]
        path = route["path"]
        name = route["name"]

        for method in methods:
            # Create a safe function name
            func_name = f"test_{method.lower()}_{name}".replace("-", "_")

            lines.append(f'def {func_name}(client):')
            lines.append(f'    """Test {method} {path}"""')

            # Build the request
            if method in ["POST", "PUT", "PATCH"]:
                # Check if we have sample values for this route
                sample_data = sample_values.get(path, {})
                data_json = json.dumps(sample_data, indent=8)

                lines.append(f'    data = {data_json}')
                lines.append(f'    response = client.{method.lower()}("{path}", json=data)')
            else:
                lines.append(f'    response = client.{method.lower()}("{path}")')

            lines.append(f'    # Basic assertion - adjust as needed')
            lines.append(f'    assert response.status_code in [200, 201, 204, 404], f"Unexpected status: {{response.status_code}}"')
            lines.append('')
            lines.append('')

    return '\n'.join(lines)


def generate_test_cases(app_import_path: str, output_path: str, sample_values: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """Generate pytest test functions for FastAPI routes."""
    if sample_values is None:
        sample_values = {}

    try:
        fastapi_app = import_fastapi_app(app_import_path)

        # Collect routes
        routes = []
        for route in fastapi_app.routes:
            if hasattr(route, "methods") and hasattr(route, "path"):
                routes.append({
                    "methods": list(route.methods),
                    "path": route.path,
                    "name": route.name if hasattr(route, "name") else "unknown"
                })

        # Generate test file content
        test_content = generate_test_file_content(
            app_import_path=app_import_path,
            routes=routes,
            sample_values=sample_values
        )

        # Write to output file
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)
        output_file.write_text(test_content)

        return {
            "success": True,
            "data": {
                "message": f"Generated {len(routes)} test cases in {output_path}",
                "test_count": len(routes),
                "output_path": output_path
            }
        }

    except Exception as e:
        return {"success": False, "error": str(e)}


def list_tests(test_path: str = ".") -> Dict[str, Any]:
    """List all pytest tests using --collect-only."""
    try:
        cmd = [sys.executable, "-m", "pytest", "--collect-only", "-q", test_path]
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=30
        )

        output = {
            "command": " ".join(cmd),
            "return_code": result.returncode,
            "stdout": result.stdout,
            "stderr": result.stderr
        }

        return {"success": True, "data": output}

    except Exception as e:
        return {"success": False, "error": str(e)}


def run_tests(test_path: str = ".", args: Optional[List[str]] = None) -> Dict[str, Any]:
    """Run pytest tests with optional arguments."""
    if args is None:
        args = []

    try:
        cmd = [sys.executable, "-m", "pytest", test_path] + args
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=120
        )

        output = {
            "command": " ".join(cmd),
            "return_code": result.returncode,
            "stdout": result.stdout,
            "stderr": result.stderr,
            "success": result.returncode == 0
        }

        return {"success": True, "data": output}

    except subprocess.TimeoutExpired:
        return {"success": False, "error": "Test execution timed out after 120 seconds"}
    except Exception as e:
        return {"success": False, "error": str(e)}


class MCPRequestHandler(BaseHTTPRequestHandler):
    """HTTP request handler for MCP server."""

    def _send_json_response(self, data: Dict[str, Any], status_code: int = 200):
        """Send a JSON response."""
        self.send_response(status_code)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        self.wfile.write(json.dumps(data, indent=2).encode('utf-8'))

    def do_OPTIONS(self):
        """Handle OPTIONS requests (CORS preflight)."""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def do_GET(self):
        """Handle GET requests."""
        if self.path == '/mcp' or self.path == '/mcp/':
            # Return available tools
            tools = {
                "server": "fastapi-mcp-server",
                "version": "1.0.0",
                "tools": [
                    {
                        "name": "discover_routes",
                        "description": "Discover all registered routes in a FastAPI application",
                        "parameters": {
                            "app_import_path": "Import path to FastAPI app (e.g., 'myapp.main:app')"
                        }
                    },
                    {
                        "name": "generate_test_cases",
                        "description": "Generate pytest test functions for FastAPI routes",
                        "parameters": {
                            "app_import_path": "Import path to FastAPI app",
                            "output_path": "Path where test file should be saved",
                            "sample_values": "Optional sample values for POST/PUT request bodies"
                        }
                    },
                    {
                        "name": "list_tests",
                        "description": "List all discovered pytest tests using --collect-only",
                        "parameters": {
                            "test_path": "Optional path to test file or directory"
                        }
                    },
                    {
                        "name": "run_tests",
                        "description": "Run pytest tests with optional arguments",
                        "parameters": {
                            "test_path": "Optional path to test file or directory",
                            "args": "Optional additional pytest arguments"
                        }
                    }
                ]
            }
            self._send_json_response(tools)
        else:
            self._send_json_response({"error": "Not found"}, 404)

    def do_POST(self):
        """Handle POST requests."""
        if not self.path.startswith('/mcp'):
            self._send_json_response({"error": "Not found"}, 404)
            return

        # Read request body
        content_length = int(self.headers.get('Content-Length', 0))
        body = self.rfile.read(content_length).decode('utf-8')

        try:
            request_data = json.loads(body) if body else {}
        except json.JSONDecodeError:
            self._send_json_response({"error": "Invalid JSON"}, 400)
            return

        tool_name = request_data.get("tool")
        arguments = request_data.get("arguments", {})

        # Route to appropriate tool
        if tool_name == "discover_routes":
            app_import_path = arguments.get("app_import_path")
            if not app_import_path:
                self._send_json_response({"error": "Missing app_import_path"}, 400)
                return
            result = discover_routes(app_import_path)
            self._send_json_response(result)

        elif tool_name == "generate_test_cases":
            app_import_path = arguments.get("app_import_path")
            output_path = arguments.get("output_path")
            sample_values = arguments.get("sample_values", {})

            if not app_import_path or not output_path:
                self._send_json_response({"error": "Missing required parameters"}, 400)
                return

            result = generate_test_cases(app_import_path, output_path, sample_values)
            self._send_json_response(result)

        elif tool_name == "list_tests":
            test_path = arguments.get("test_path", ".")
            result = list_tests(test_path)
            self._send_json_response(result)

        elif tool_name == "run_tests":
            test_path = arguments.get("test_path", ".")
            args = arguments.get("args", [])
            result = run_tests(test_path, args)
            self._send_json_response(result)

        else:
            self._send_json_response({"error": f"Unknown tool: {tool_name}"}, 400)

    def log_message(self, format, *args):
        """Custom log message format."""
        print(f"[{self.log_date_time_string()}] {format % args}")


def main():
    """
    Run the MCP server over HTTP on http://127.0.0.1:8001/mcp
    """
    host = "127.0.0.1"
    port = 8001

    print("=" * 60)
    print("FastAPI MCP Server - HTTP Mode")
    print("=" * 60)
    print()
    print(f"Server running on: http://{host}:{port}/mcp")
    print()
    print("Available tools:")
    print("  - discover_routes: Discover FastAPI app routes")
    print("  - generate_test_cases: Generate pytest test cases")
    print("  - list_tests: List all pytest tests")
    print("  - run_tests: Run pytest tests")
    print()
    print("Example POST request:")
    print(f'  curl -X POST http://{host}:{port}/mcp \\')
    print('       -H "Content-Type: application/json" \\')
    print('       -d \'{"tool": "discover_routes", "arguments": {"app_import_path": "myapp.main:app"}}\'')
    print()
    print("Press Ctrl+C to stop the server")
    print("=" * 60)
    print()

    server = HTTPServer((host, port), MCPRequestHandler)

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\n\nShutting down server...")
        server.shutdown()
        print("Server stopped.")


if __name__ == "__main__":
    main()
